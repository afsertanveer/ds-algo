#include <iostream>
#include<vector>
using namespace std;


class Node{
public:
  int data;
  Node* left;
  Node* right;
  Node(int val){
      data = val ;
      left = right = NULL;
  }
};

Node* insert(Node* root, int val){
    if(root==NULL){
        return new Node(val);
    }
    if(root->data>val){
        root->left = insert(root->left,val);
    }else{
        root->right = insert(root->right,val);
    }
    return root ;
}


Node* buildBST(vector<int>arr){
    Node* root = NULL;
    for(int val:arr){
        root = insert(root,val);
    }
    return root ;
}

void inorder(Node* root){
    if(root == NULL){
        return ;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

bool search(Node* root,int val){
    if(root==NULL) return false;
    if(root->data==val) return true;
    
    if(root->data>val){
        return search(root->left,val);
    }else{
        return search(root->right,val);
    }
} 

//inorder successor
Node* getIS(Node* root){
    while(root!=NULL && root->left !=NULL){
        root = root->left ;
    }
    return root ;
}

Node* deleteNode(Node* root, int key){
    if(root==NULL) return NULL;
    
    if(root->data>key){
        root->left = deleteNode(root->left,key);
    }else if(root->data<key){
        root->right = deleteNode(root->right,key);
    }
    else{
        Node* temp = root->right;
        if(root->left==NULL){
        delete(root);
        return temp;
    }else if(root->right==NULL){
        delete root ;
        return temp;
    }else{
        Node* IS = getIS(root->right);
        root->data = IS->data;
        root->right = deleteNode(root->right,IS->data);
        
    }
    }
    return root;
    
}

int main() {
    vector<int> arr = {3,2,1,5,6,4};
    Node* root;
    root = buildBST(arr);
    // cout<<search(root,8)<<endl;
    root =deleteNode(root,1);
    inorder(root);
    cout<<endl;
    
    return 0;
}